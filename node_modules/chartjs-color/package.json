{
  "_args": [
    [
      {
        "raw": "chartjs-color@^2.1.0",
        "scope": null,
        "escapedName": "chartjs-color",
        "name": "chartjs-color",
        "rawSpec": "^2.1.0",
        "spec": ">=2.1.0 <3.0.0",
        "type": "range"
      },
      "C:\\xampp\\htdocs\\vue_food\\node_modules\\chart.js"
    ]
  ],
  "_from": "chartjs-color@^2.1.0",
  "_hasShrinkwrap": false,
  "_id": "chartjs-color@2.4.1",
  "_location": "/chartjs-color",
  "_nodeVersion": "12.13.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/chartjs-color_2.4.1_1572036681884_0.9734643737042736"
  },
  "_npmUser": {
    "name": "chartjs-ci",
    "email": "chartjs-ci@abysscorp.org"
  },
  "_npmVersion": "6.12.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "chartjs-color@^2.1.0",
    "scope": null,
    "escapedName": "chartjs-color",
    "name": "chartjs-color",
    "rawSpec": "^2.1.0",
    "spec": ">=2.1.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/chart.js"
  ],
  "_resolved": "https://registry.npmjs.org/chartjs-color/-/chartjs-color-2.4.1.tgz",
  "_shasum": "6118bba202fe1ea79dd7f7c0f9da93467296c3b0",
  "_shrinkwrap": null,
  "_spec": "chartjs-color@^2.1.0",
  "_where": "C:\\xampp\\htdocs\\vue_food\\node_modules\\chart.js",
  "authors": [
    "Heather Arthur <fayearthur@gmail.com>",
    "Maxime Thirouin",
    "Josh Junon"
  ],
  "bugs": {
    "url": "https://github.com/chartjs/chartjs-color/issues"
  },
  "dependencies": {
    "chartjs-color-string": "^0.6.0",
    "color-convert": "^1.9.3"
  },
  "description": "Color conversion and manipulation with CSS string support",
  "devDependencies": {
    "browserify": "^16.2.3",
    "gulp": "^4.0.0",
    "gulp-rename": "^1.4.0",
    "gulp-streamify": "^1.0.2",
    "gulp-uglify": "^3.0.2",
    "mocha": "^6.0.2",
    "vinyl-source-stream": "^2.0.0",
    "xo": "^0.12.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-haqOg1+Yebys/Ts/9bLo/BqUcONQOdr/hoEr2LLTRl6C5LXctUdHxsCYfvQVg5JIxITrfCNUDr4ntqmQk9+/0w==",
    "shasum": "6118bba202fe1ea79dd7f7c0f9da93467296c3b0",
    "tarball": "https://registry.npmjs.org/chartjs-color/-/chartjs-color-2.4.1.tgz",
    "fileCount": 5,
    "unpackedSize": 17861,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJds2BKCRA9TVsSAnZWagAAJJwP/3k4aWqCbHuvU/Uo4APU\nW4k9OYT6tV0OPlWPZorLSngkeb58zAVq6HOIOzolK/EwHtHgzAWC2rq0qS89\nyGjAT8uozAyYjPzzzDIvwqx9EQhlmpnU8Pq2N3DDCcqMOdHv4xmr98Oc5tS8\ntVtGt1pPGB00aKSau3jqf5Euoq9mJKqBCGVWyPdCnnphE17AbCjZvcbTAyNG\nKkMwyVj3IzNtIkpo8Ol+gddK4aiGKMJVzvRUA6MkQhvi3BjgdaL4ckMqBPpW\n4SR2OfFtpD3f+eBVVQAMDy0IGnWoUJ2CesfZS/z6US3+FeRSKUcm23rl+bzJ\nqugiNUI8CMzCr8SQP5Z4B+BGfqe+c9Q2liiDOIYMZJBXqVC3MhC0fg7wg4mX\nMEyFrOkz5ZI5l4R/WnoxeGYKval2+xvoObFHNXnsR7rxKkNuVJKu/hTW+NLp\na0E7p4Kp+S8oba9d4LI7Vv1bL+uY6hrNmeVi78Mnzy02o5FdkxK3/r8y1B2x\nHa2Da6fFYYpZskx9HwXxuADyQWHuLOE7GJKzPBlQGaVyi2Y3G7j2DdZXaznQ\n6EjucnHnUOFMDqGXamt57FJVamziULtLvz6gaCk0/Fp6cJbowc9Gx1HPZQHg\n+BPuqn6T0C4nvYBFrcTX21L9644/93Ww9Nl2dWcSyJnijGEEoB3QL19hUOSy\nzkRd\r\n=VVrZ\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "CHANGELOG.md",
    "LICENSE",
    "index.js"
  ],
  "gitHead": "df3bfdc1a365dc1460646a8ff4c1c0a05971a2bc",
  "homepage": "https://github.com/chartjs/chartjs-color#readme",
  "keywords": [
    "color",
    "colour",
    "css"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "chartjs-ci",
      "email": "chartjs-ci@abysscorp.org"
    },
    {
      "name": "tannerlinsley",
      "email": "tannerlinsley@gmail.com"
    }
  ],
  "name": "chartjs-color",
  "optionalDependencies": {},
  "readme": "# chartjs-color\n\n[![npm](https://img.shields.io/npm/v/chartjs-color.svg?style=flat-square)](https://npmjs.com/package/chartjs-color) [![Travis](https://img.shields.io/travis/chartjs/chartjs-color.svg?style=flat-square)](https://travis-ci.org/chartjs/chartjs-color)\n\n> JavaScript library for color conversion and manipulation with support for CSS color strings.\n\n```js\nvar color = Color(\"#7743CE\");\n\ncolor.alpha(0.5).lighten(0.5);\n\nconsole.log(color.hslString());  // \"hsla(262, 59%, 81%, 0.5)\"\n```\n\n## Install\n\n```console\n$ npm install color\n```\n\n## Usage\n\n```js\nvar Color = require(\"color\")\n```\n\n### Setters\n\n```js\nvar color = Color(\"rgb(255, 255, 255)\")\nvar color = Color({r: 255, g: 255, b: 255})\nvar color = Color().rgb(255, 255, 255)\nvar color = Color().rgb([255, 255, 255])\n```\nPass any valid CSS color string into `Color()` or a hash of values. Also load in color values with `rgb()`, `hsl()`, `hsv()`, `hwb()`, and `cmyk()`.\n\n```js\ncolor.red(120)\n```\nSet the values for individual channels with `alpha`, `red`, `green`, `blue`, `hue`, `saturation` (hsl), `saturationv` (hsv), `lightness`, `whiteness`, `blackness`, `cyan`, `magenta`, `yellow`, `black`\n\n### Getters\n\n\n```js\ncolor.rgb()       // {r: 255, g: 255, b: 255}\n```\nGet a hash of the rgb values with `rgb()`, similarly for `hsl()`, `hsv()`, and `cmyk()`\n\n```js\ncolor.rgbArray()  // [255, 255, 255]\n```\nGet an array of the values with `rgbArray()`, `hslArray()`, `hsvArray()`, and `cmykArray()`.\n\n```js\ncolor.red()       // 255\n```\nGet the value for an individual channel.\n\n### CSS Strings\n\n```js\ncolor.hslString()  // \"hsl(320, 50%, 100%)\"\n```\n\nDifferent CSS String formats for the color are on `hexString`, `rgbString`, `percentString`, `hslString`, `hwbString`, and `keyword` (undefined if it's not a keyword color). `\"rgba\"` and `\"hsla\"` are used if the current alpha value of the color isn't `1`.\n\n### Luminosity\n\n```js\ncolor.luminosity();  // 0.412\n```\nThe [WCAG luminosity](http://www.w3.org/TR/WCAG20/#relativeluminancedef) of the color. 0 is black, 1 is white.\n\n```js\ncolor.contrast(Color(\"blue\"))  // 12\n```\nThe [WCAG contrast ratio](http://www.w3.org/TR/WCAG20/#contrast-ratiodef) to another color, from 1 (same color) to 21 (contrast b/w white and black).\n\n```js\ncolor.light();  // true\ncolor.dark();   // false\n```\nGet whether the color is \"light\" or \"dark\", useful for deciding text color.\n\n### Manipulation\n\n```js\ncolor.negate()         // rgb(0, 100, 255) -> rgb(255, 155, 0)\n\ncolor.lighten(0.5)     // hsl(100, 50%, 50%) -> hsl(100, 50%, 75%)\ncolor.darken(0.5)      // hsl(100, 50%, 50%) -> hsl(100, 50%, 25%)\n\ncolor.saturate(0.5)    // hsl(100, 50%, 50%) -> hsl(100, 75%, 50%)\ncolor.desaturate(0.5)  // hsl(100, 50%, 50%) -> hsl(100, 25%, 50%)\ncolor.greyscale()      // #5CBF54 -> #969696\n\ncolor.whiten(0.5)      // hwb(100, 50%, 50%) -> hwb(100, 75%, 50%)\ncolor.blacken(0.5)     // hwb(100, 50%, 50%) -> hwb(100, 50%, 75%)\n\ncolor.clearer(0.5)     // rgba(10, 10, 10, 0.8) -> rgba(10, 10, 10, 0.4)\ncolor.opaquer(0.5)     // rgba(10, 10, 10, 0.8) -> rgba(10, 10, 10, 1.0)\n\ncolor.rotate(180)      // hsl(60, 20%, 20%) -> hsl(240, 20%, 20%)\ncolor.rotate(-90)      // hsl(60, 20%, 20%) -> hsl(330, 20%, 20%)\n\ncolor.mix(Color(\"yellow\"))        // cyan -> rgb(128, 255, 128)\ncolor.mix(Color(\"yellow\"), 0.3)   // cyan -> rgb(77, 255, 179)\n\n// chaining\ncolor.green(100).greyscale().lighten(0.6)\n```\n\n### Clone\n\nYou can can create a copy of an existing color object using `clone()`:\n\n```js\ncolor.clone() // -> New color object\n```\n\nAnd more to come...\n\n## Propers\n\nThe API was inspired by [color-js](https://github.com/brehaut/color-js). Manipulation functions by CSS tools like Sass, LESS, and Stylus.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/chartjs/chartjs-color.git"
  },
  "scripts": {
    "pretest": "xo",
    "test": "mocha"
  },
  "version": "2.4.1",
  "xo": {
    "envs": [
      "browser",
      "node"
    ],
    "rules": {
      "one-var": [
        2,
        {
          "initialized": "never"
        }
      ],
      "linebreak-style": 0,
      "no-cond-assign": 0,
      "new-cap": 0
    }
  }
}
